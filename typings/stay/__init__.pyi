"""
This type stub file was generated by pyright.
"""

from collections.abc import Iterable
from types import EllipsisType
from typing import Callable

"""
>>> load = Decoder()
>>> doc = ""
>>> list(load(doc))
[{}]
>>> doc = "a: 1"
>>> list(load(doc))
[{'a': '1'}]
"""
logger = ...
Ellipsis = EllipsisType
T = ...
D = ...
__version__ = ...
Result = ...

class ParsingError(Exception): ...

class State:
    def __init__(self, context: dict[str, str]) -> None: ...

def level(line: str, spaces_per_indent: int) -> int: ...

class Decoder:
    def __init__(
        self,
        commands: dict[str, Callable[[str], str]] | None = ...,
        meta_directives: dict[str, str] | None = ...,
        line_directives: dict[str, str] | None = ...,
        value_directives: dict[str, str] | None = ...,
        key_directives: dict[str, str] | None = ...,
        struct_directives: dict[str, str] | None = ...,
        default_context: dict[str, str] | None = ...,
        custom_cases: dict[str, str] | None = ...,
    ) -> None: ...
    def __call__(self, lines: Iterable[str], spaces_per_indent: int = ...) -> Iterable[dict[str, str]]: ...

class Encoder:
    def __call__(self, it: Iterable[str | dict[str, str]], spaces_per_indent: int = ...) -> str:
        """Process an iterator of dictionaries as STAY documents, without comments.
        On second thought, it would be cool to auto-add comments, making the file self-documenting.
        """
        ...

def dumps(it: Iterable[str | dict[str, str]], spaces_per_indent: int = ...) -> str:
    """Process an iterator of dictionaries as STAY documents, without comments.
    On second thought, it would be cool to auto-add comments, making the file self-documenting.
    """
    ...

def loads(doc: str) -> Iterable[dict[str, str]]: ...

if __name__ == "__main__": ...
